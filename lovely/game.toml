[manifest]
version = "1.0.0"
dump_lua = true
priority = 2147483647

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if self.STATE == self.STATES.MENU then
            self:update_menu(dt)
        end'''
position = 'after'
payload = '''
    if self.STATE == self.STATES.WAITING_ON_ANTE_INFO then
      MP.update_waiting_on_ante_info(dt)
    end
    
    if self.STATE == self.STATES.WAITING_ON_PVP_END then
      MP.update_waiting_on_pvp_end(dt)
    end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.GAME.round_resets.blind_choices.Boss = get_new_boss()'''
position = 'at'
payload = '''self.GAME.round_resets.blind_choices.Boss = MPAPI.is_in_lobby() and self.GAME.round_resets.blind_choices.Boss or get_new_boss()'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self:prep_stage(G.STAGES.RUN, saveTable and saveTable.STATE or G.STATES.BLIND_SELECT)'''
position = 'at'
payload = '''self:prep_stage(G.STAGES.RUN, saveTable and saveTable.STATE or MPAPI.is_in_lobby() and G.STATES.WAITING_ON_ANTE_INFO or G.STATES.BLIND_SELECT)'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.GAME.round_resets.blind_choices.Boss = get_new_boss()'''
position = 'at'
payload = '''G.GAME.round_resets.blind_choices.Boss = MPAPI.is_in_lobby() and G.GAME.round_resets.blind_choices.Boss or get_new_boss()'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.round_resets.blind_choices.Boss = get_new_boss()'''
position = 'at'
payload = '''G.GAME.round_resets.blind_choices.Boss = MPAPI.is_in_lobby() and G.GAME.round_resets.blind_choices.Boss or get_new_boss()'''
match_indent = true
times = 2

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''local main_menu = nil'''
position = 'after'
payload = '''local return_to_lobby = nil
local leave_lobby = nil'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''main_menu = UIBox_button{ label = {localize('b_main_menu')}, button = "go_to_menu", minw = 5}'''
position = 'after'
payload = '''return_to_lobby = UIBox_button{ label = {localize('b_return_to_lobby')}, button = "mp_return_to_lobby", minw = 5}
leave_lobby = UIBox_button{ label = {localize('b_leave_lobby')}, button = "mp_leave_lobby", minw = 5}'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''restart,
      main_menu,'''
position = 'at'
payload = '''not MPAPI.is_in_lobby() and restart or nil,
not MPAPI.is_in_lobby() and main_menu or nil,
MPAPI.is_in_lobby() and return_to_lobby or nil,
MPAPI.is_in_lobby() and leave_lobby or nil,'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.current_round.hands_left > 0 and not G.GAME.modifiers.no_extra_hand_money then'''
position = 'at'
payload = '''if G.GAME.current_round.hands_left > 0 and not G.GAME.modifiers.no_extra_hand_money and not MP.is_pvp_boss() then'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''dollars = dollars + G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)
    end'''
position = 'after'
payload = '''
  if not MP.game_state.comeback_bonus_given then
		MP.game_state.comeback_bonus_given = true
		add_round_eval_row({
			bonus = true,
			name = "comeback",
			pitch = pitch,
			dollars = 4 * MP.game_state.comeback_bonus,
		})
		dollars = dollars + 4 * MP.game_state.comeback_bonus
	end'''
match_indent = false
times = 1

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''function end_round\(\)(?<pre>[\s\S]+?)func = function\(\)'''
position = 'at'
payload = "function end_round()$pre func = MPAPI.is_in_lobby() and MP.end_round or function()"
match_indent = false
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''function Game:update_round_eval\(dt\)(?<pre>[\s\S]+?)if not G.STATE_COMPLETE then'''
position = 'at'
payload = '''function Game:update_round_eval(dt)$pre if not G.STATE_COMPLETE and not MP.game_state.prevent_eval then
        MP.game_state.prevent_eval = true'''
match_indent = true
times = 1


[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''config.saved and'''
position = 'before'
payload = '''MPAPI.is_in_lobby() and (MP.is_pvp_boss() or MP.game_state.failed) and {
  n = G.UIT.C,
  config = { padding = 0.05, align = "cm" },
  nodes = {
    {
      n = G.UIT.R,
      config = { align = "cm" },
      nodes = {
        {
          n = G.UIT.O,
          config = {
            object = DynaText({
              string = {
                (
                  MP.game_state.failed
                  and (
                    (
                      (
                        MP.is_pvp_boss()
                        or MP.lobby_state.config.death_on_round_loss
                      )
                      and localize("lost_life")
                    ) or localize("failed")
                  )
                ) or localize("defeat_enemy"),
              },
              colours = { G.C.FILTER },
              shadow = true,
              pop_in = 0,
              scale = 0.5 * scale,
              silent = true,
            }),
          },
        },
      },
    },
  },
} or'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif config.name == 'hands' then'''
position = 'before'
payload = '''elseif config.name == "comeback" then
  table.insert(left_text, {
    n = G.UIT.T,
    config = {
      text = MP.game_state.comeback_bonus,
      scale = 0.8 * scale,
      colour = G.C.PURPLE,
      shadow = true,
      juice = true,
    },
  })
  table.insert(left_text, {
    n = G.UIT.O,
    config = {
      object = DynaText({
        string = {
          localize("total_lives_lost"),
        },
        colours = { G.C.UI.TEXT_LIGHT },
        shadow = true,
        pop_in = 0,
        scale = 0.4 * scale,
        silent = true,
      }),
    },
  })'''
match_indent = true
times = 1